// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: community.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityServiceClient interface {
	// reading data
	GetCommunity(ctx context.Context, in *CommunityGetRequest, opts ...grpc.CallOption) (*CommunityMetaData, error)
	CommunitySearch(ctx context.Context, in *CommunityGetRequest, opts ...grpc.CallOption) (CommunityService_CommunitySearchClient, error)
	GetSpaces(ctx context.Context, in *CommunityGetRequest, opts ...grpc.CallOption) (CommunityService_GetSpacesClient, error)
	// posting data
	NewCommunity(ctx context.Context, in *CommunityMetaData, opts ...grpc.CallOption) (*MStatus, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) GetCommunity(ctx context.Context, in *CommunityGetRequest, opts ...grpc.CallOption) (*CommunityMetaData, error) {
	out := new(CommunityMetaData)
	err := c.cc.Invoke(ctx, "/grpc.CommunityService/GetCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) CommunitySearch(ctx context.Context, in *CommunityGetRequest, opts ...grpc.CallOption) (CommunityService_CommunitySearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommunityService_ServiceDesc.Streams[0], "/grpc.CommunityService/CommunitySearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &communityServiceCommunitySearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommunityService_CommunitySearchClient interface {
	Recv() (*CommunityMetaData, error)
	grpc.ClientStream
}

type communityServiceCommunitySearchClient struct {
	grpc.ClientStream
}

func (x *communityServiceCommunitySearchClient) Recv() (*CommunityMetaData, error) {
	m := new(CommunityMetaData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *communityServiceClient) GetSpaces(ctx context.Context, in *CommunityGetRequest, opts ...grpc.CallOption) (CommunityService_GetSpacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommunityService_ServiceDesc.Streams[1], "/grpc.CommunityService/GetSpaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &communityServiceGetSpacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommunityService_GetSpacesClient interface {
	Recv() (*CommunityMetaData, error)
	grpc.ClientStream
}

type communityServiceGetSpacesClient struct {
	grpc.ClientStream
}

func (x *communityServiceGetSpacesClient) Recv() (*CommunityMetaData, error) {
	m := new(CommunityMetaData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *communityServiceClient) NewCommunity(ctx context.Context, in *CommunityMetaData, opts ...grpc.CallOption) (*MStatus, error) {
	out := new(MStatus)
	err := c.cc.Invoke(ctx, "/grpc.CommunityService/NewCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility
type CommunityServiceServer interface {
	// reading data
	GetCommunity(context.Context, *CommunityGetRequest) (*CommunityMetaData, error)
	CommunitySearch(*CommunityGetRequest, CommunityService_CommunitySearchServer) error
	GetSpaces(*CommunityGetRequest, CommunityService_GetSpacesServer) error
	// posting data
	NewCommunity(context.Context, *CommunityMetaData) (*MStatus, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServiceServer struct {
}

func (UnimplementedCommunityServiceServer) GetCommunity(context.Context, *CommunityGetRequest) (*CommunityMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) CommunitySearch(*CommunityGetRequest, CommunityService_CommunitySearchServer) error {
	return status.Errorf(codes.Unimplemented, "method CommunitySearch not implemented")
}
func (UnimplementedCommunityServiceServer) GetSpaces(*CommunityGetRequest, CommunityService_GetSpacesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSpaces not implemented")
}
func (UnimplementedCommunityServiceServer) NewCommunity(context.Context, *CommunityMetaData) (*MStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_GetCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CommunityService/GetCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunity(ctx, req.(*CommunityGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_CommunitySearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommunityGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommunityServiceServer).CommunitySearch(m, &communityServiceCommunitySearchServer{stream})
}

type CommunityService_CommunitySearchServer interface {
	Send(*CommunityMetaData) error
	grpc.ServerStream
}

type communityServiceCommunitySearchServer struct {
	grpc.ServerStream
}

func (x *communityServiceCommunitySearchServer) Send(m *CommunityMetaData) error {
	return x.ServerStream.SendMsg(m)
}

func _CommunityService_GetSpaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommunityGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommunityServiceServer).GetSpaces(m, &communityServiceGetSpacesServer{stream})
}

type CommunityService_GetSpacesServer interface {
	Send(*CommunityMetaData) error
	grpc.ServerStream
}

type communityServiceGetSpacesServer struct {
	grpc.ServerStream
}

func (x *communityServiceGetSpacesServer) Send(m *CommunityMetaData) error {
	return x.ServerStream.SendMsg(m)
}

func _CommunityService_NewCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).NewCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CommunityService/NewCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).NewCommunity(ctx, req.(*CommunityMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommunity",
			Handler:    _CommunityService_GetCommunity_Handler,
		},
		{
			MethodName: "NewCommunity",
			Handler:    _CommunityService_NewCommunity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommunitySearch",
			Handler:       _CommunityService_CommunitySearch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSpaces",
			Handler:       _CommunityService_GetSpaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "community.proto",
}
